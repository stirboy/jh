// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gitclient

import (
	"sync"
)

// Ensure, that GitClientMock does implement GitClient.
// If this is not the case, regenerate this file with moq.
var _ GitClient = &GitClientMock{}

// GitClientMock is a mock implementation of GitClient.
//
//	func TestSomethingThatUsesGitClient(t *testing.T) {
//
//		// make and configure a mocked GitClient
//		mockedGitClient := &GitClientMock{
//			CreateBranchWithCheckoutFunc: func(s string) error {
//				panic("mock out the CreateBranchWithCheckout method")
//			},
//		}
//
//		// use mockedGitClient in code that requires GitClient
//		// and then make assertions.
//
//	}
type GitClientMock struct {
	// CreateBranchWithCheckoutFunc mocks the CreateBranchWithCheckout method.
	CreateBranchWithCheckoutFunc func(s string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateBranchWithCheckout holds details about calls to the CreateBranchWithCheckout method.
		CreateBranchWithCheckout []struct {
			// S is the s argument value.
			S string
		}
	}
	lockCreateBranchWithCheckout sync.RWMutex
}

// CreateBranchWithCheckout calls CreateBranchWithCheckoutFunc.
func (mock *GitClientMock) CreateBranchWithCheckout(s string) error {
	if mock.CreateBranchWithCheckoutFunc == nil {
		panic("GitClientMock.CreateBranchWithCheckoutFunc: method is nil but GitClient.CreateBranchWithCheckout was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockCreateBranchWithCheckout.Lock()
	mock.calls.CreateBranchWithCheckout = append(mock.calls.CreateBranchWithCheckout, callInfo)
	mock.lockCreateBranchWithCheckout.Unlock()
	return mock.CreateBranchWithCheckoutFunc(s)
}

// CreateBranchWithCheckoutCalls gets all the calls that were made to CreateBranchWithCheckout.
// Check the length with:
//
//	len(mockedGitClient.CreateBranchWithCheckoutCalls())
func (mock *GitClientMock) CreateBranchWithCheckoutCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockCreateBranchWithCheckout.RLock()
	calls = mock.calls.CreateBranchWithCheckout
	mock.lockCreateBranchWithCheckout.RUnlock()
	return calls
}
