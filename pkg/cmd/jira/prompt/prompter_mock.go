// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package prompt

import (
	"github.com/AlecAivazis/survey/v2"
	"sync"
)

// Ensure, that PrompterMock does implement Prompter.
// If this is not the case, regenerate this file with moq.
var _ Prompter = &PrompterMock{}

// PrompterMock is a mock implementation of Prompter.
//
//	func TestSomethingThatUsesPrompter(t *testing.T) {
//
//		// make and configure a mocked Prompter
//		mockedPrompter := &PrompterMock{
//			ConfirmFunc: func(s string) (bool, error) {
//				panic("mock out the Confirm method")
//			},
//			InputFunc: func(s1 string, s2 string, askOpts ...survey.AskOpt) (string, error) {
//				panic("mock out the Input method")
//			},
//			InputWithHelpFunc: func(s1 string, s2 string, s3 string, askOpts ...survey.AskOpt) (string, error) {
//				panic("mock out the InputWithHelp method")
//			},
//			SelectFunc: func(s string, strings []string) (string, error) {
//				panic("mock out the Select method")
//			},
//			SelectWithHelpFunc: func(s1 string, s2 string, strings []string) (string, error) {
//				panic("mock out the SelectWithHelp method")
//			},
//		}
//
//		// use mockedPrompter in code that requires Prompter
//		// and then make assertions.
//
//	}
type PrompterMock struct {
	// ConfirmFunc mocks the Confirm method.
	ConfirmFunc func(s string) (bool, error)

	// InputFunc mocks the Input method.
	InputFunc func(s1 string, s2 string, askOpts ...survey.AskOpt) (string, error)

	// InputWithHelpFunc mocks the InputWithHelp method.
	InputWithHelpFunc func(s1 string, s2 string, s3 string, askOpts ...survey.AskOpt) (string, error)

	// SelectFunc mocks the Select method.
	SelectFunc func(s string, strings []string) (string, error)

	// SelectWithHelpFunc mocks the SelectWithHelp method.
	SelectWithHelpFunc func(s1 string, s2 string, strings []string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Confirm holds details about calls to the Confirm method.
		Confirm []struct {
			// S is the s argument value.
			S string
		}
		// Input holds details about calls to the Input method.
		Input []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// AskOpts is the askOpts argument value.
			AskOpts []survey.AskOpt
		}
		// InputWithHelp holds details about calls to the InputWithHelp method.
		InputWithHelp []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
			// AskOpts is the askOpts argument value.
			AskOpts []survey.AskOpt
		}
		// Select holds details about calls to the Select method.
		Select []struct {
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// SelectWithHelp holds details about calls to the SelectWithHelp method.
		SelectWithHelp []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockConfirm        sync.RWMutex
	lockInput          sync.RWMutex
	lockInputWithHelp  sync.RWMutex
	lockSelect         sync.RWMutex
	lockSelectWithHelp sync.RWMutex
}

// Confirm calls ConfirmFunc.
func (mock *PrompterMock) Confirm(s string) (bool, error) {
	if mock.ConfirmFunc == nil {
		panic("PrompterMock.ConfirmFunc: method is nil but Prompter.Confirm was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockConfirm.Lock()
	mock.calls.Confirm = append(mock.calls.Confirm, callInfo)
	mock.lockConfirm.Unlock()
	return mock.ConfirmFunc(s)
}

// ConfirmCalls gets all the calls that were made to Confirm.
// Check the length with:
//
//	len(mockedPrompter.ConfirmCalls())
func (mock *PrompterMock) ConfirmCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockConfirm.RLock()
	calls = mock.calls.Confirm
	mock.lockConfirm.RUnlock()
	return calls
}

// Input calls InputFunc.
func (mock *PrompterMock) Input(s1 string, s2 string, askOpts ...survey.AskOpt) (string, error) {
	if mock.InputFunc == nil {
		panic("PrompterMock.InputFunc: method is nil but Prompter.Input was just called")
	}
	callInfo := struct {
		S1      string
		S2      string
		AskOpts []survey.AskOpt
	}{
		S1:      s1,
		S2:      s2,
		AskOpts: askOpts,
	}
	mock.lockInput.Lock()
	mock.calls.Input = append(mock.calls.Input, callInfo)
	mock.lockInput.Unlock()
	return mock.InputFunc(s1, s2, askOpts...)
}

// InputCalls gets all the calls that were made to Input.
// Check the length with:
//
//	len(mockedPrompter.InputCalls())
func (mock *PrompterMock) InputCalls() []struct {
	S1      string
	S2      string
	AskOpts []survey.AskOpt
} {
	var calls []struct {
		S1      string
		S2      string
		AskOpts []survey.AskOpt
	}
	mock.lockInput.RLock()
	calls = mock.calls.Input
	mock.lockInput.RUnlock()
	return calls
}

// InputWithHelp calls InputWithHelpFunc.
func (mock *PrompterMock) InputWithHelp(s1 string, s2 string, s3 string, askOpts ...survey.AskOpt) (string, error) {
	if mock.InputWithHelpFunc == nil {
		panic("PrompterMock.InputWithHelpFunc: method is nil but Prompter.InputWithHelp was just called")
	}
	callInfo := struct {
		S1      string
		S2      string
		S3      string
		AskOpts []survey.AskOpt
	}{
		S1:      s1,
		S2:      s2,
		S3:      s3,
		AskOpts: askOpts,
	}
	mock.lockInputWithHelp.Lock()
	mock.calls.InputWithHelp = append(mock.calls.InputWithHelp, callInfo)
	mock.lockInputWithHelp.Unlock()
	return mock.InputWithHelpFunc(s1, s2, s3, askOpts...)
}

// InputWithHelpCalls gets all the calls that were made to InputWithHelp.
// Check the length with:
//
//	len(mockedPrompter.InputWithHelpCalls())
func (mock *PrompterMock) InputWithHelpCalls() []struct {
	S1      string
	S2      string
	S3      string
	AskOpts []survey.AskOpt
} {
	var calls []struct {
		S1      string
		S2      string
		S3      string
		AskOpts []survey.AskOpt
	}
	mock.lockInputWithHelp.RLock()
	calls = mock.calls.InputWithHelp
	mock.lockInputWithHelp.RUnlock()
	return calls
}

// Select calls SelectFunc.
func (mock *PrompterMock) Select(s string, strings []string) (string, error) {
	if mock.SelectFunc == nil {
		panic("PrompterMock.SelectFunc: method is nil but Prompter.Select was just called")
	}
	callInfo := struct {
		S       string
		Strings []string
	}{
		S:       s,
		Strings: strings,
	}
	mock.lockSelect.Lock()
	mock.calls.Select = append(mock.calls.Select, callInfo)
	mock.lockSelect.Unlock()
	return mock.SelectFunc(s, strings)
}

// SelectCalls gets all the calls that were made to Select.
// Check the length with:
//
//	len(mockedPrompter.SelectCalls())
func (mock *PrompterMock) SelectCalls() []struct {
	S       string
	Strings []string
} {
	var calls []struct {
		S       string
		Strings []string
	}
	mock.lockSelect.RLock()
	calls = mock.calls.Select
	mock.lockSelect.RUnlock()
	return calls
}

// SelectWithHelp calls SelectWithHelpFunc.
func (mock *PrompterMock) SelectWithHelp(s1 string, s2 string, strings []string) (string, error) {
	if mock.SelectWithHelpFunc == nil {
		panic("PrompterMock.SelectWithHelpFunc: method is nil but Prompter.SelectWithHelp was just called")
	}
	callInfo := struct {
		S1      string
		S2      string
		Strings []string
	}{
		S1:      s1,
		S2:      s2,
		Strings: strings,
	}
	mock.lockSelectWithHelp.Lock()
	mock.calls.SelectWithHelp = append(mock.calls.SelectWithHelp, callInfo)
	mock.lockSelectWithHelp.Unlock()
	return mock.SelectWithHelpFunc(s1, s2, strings)
}

// SelectWithHelpCalls gets all the calls that were made to SelectWithHelp.
// Check the length with:
//
//	len(mockedPrompter.SelectWithHelpCalls())
func (mock *PrompterMock) SelectWithHelpCalls() []struct {
	S1      string
	S2      string
	Strings []string
} {
	var calls []struct {
		S1      string
		S2      string
		Strings []string
	}
	mock.lockSelectWithHelp.RLock()
	calls = mock.calls.SelectWithHelp
	mock.lockSelectWithHelp.RUnlock()
	return calls
}
