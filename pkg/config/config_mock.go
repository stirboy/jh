// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	"sync"
)

// Ensure, that ConfigMock does implement Config.
// If this is not the case, regenerate this file with moq.
var _ Config = &ConfigMock{}

// ConfigMock is a mock implementation of Config.
//
//	func TestSomethingThatUsesConfig(t *testing.T) {
//
//		// make and configure a mocked Config
//		mockedConfig := &ConfigMock{
//			AuthTokenFunc: func() (string, error) {
//				panic("mock out the AuthToken method")
//			},
//			GetFunc: func(s string) (string, error) {
//				panic("mock out the Get method")
//			},
//			GetNestedFunc: func(strings []string) (string, error) {
//				panic("mock out the GetNested method")
//			},
//			SetFunc: func(s1 string, s2 string)  {
//				panic("mock out the Set method")
//			},
//			SetNestedFunc: func(strings []string, s string)  {
//				panic("mock out the SetNested method")
//			},
//			WriteFunc: func() error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedConfig in code that requires Config
//		// and then make assertions.
//
//	}
type ConfigMock struct {
	// AuthTokenFunc mocks the AuthToken method.
	AuthTokenFunc func() (string, error)

	// GetFunc mocks the Get method.
	GetFunc func(s string) (string, error)

	// GetNestedFunc mocks the GetNested method.
	GetNestedFunc func(strings []string) (string, error)

	// SetFunc mocks the Set method.
	SetFunc func(s1 string, s2 string)

	// SetNestedFunc mocks the SetNested method.
	SetNestedFunc func(strings []string, s string)

	// WriteFunc mocks the Write method.
	WriteFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// AuthToken holds details about calls to the AuthToken method.
		AuthToken []struct {
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
		// GetNested holds details about calls to the GetNested method.
		GetNested []struct {
			// Strings is the strings argument value.
			Strings []string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
		// SetNested holds details about calls to the SetNested method.
		SetNested []struct {
			// Strings is the strings argument value.
			Strings []string
			// S is the s argument value.
			S string
		}
		// Write holds details about calls to the Write method.
		Write []struct {
		}
	}
	lockAuthToken sync.RWMutex
	lockGet       sync.RWMutex
	lockGetNested sync.RWMutex
	lockSet       sync.RWMutex
	lockSetNested sync.RWMutex
	lockWrite     sync.RWMutex
}

// AuthToken calls AuthTokenFunc.
func (mock *ConfigMock) AuthToken() (string, error) {
	if mock.AuthTokenFunc == nil {
		panic("ConfigMock.AuthTokenFunc: method is nil but Config.AuthToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthToken.Lock()
	mock.calls.AuthToken = append(mock.calls.AuthToken, callInfo)
	mock.lockAuthToken.Unlock()
	return mock.AuthTokenFunc()
}

// AuthTokenCalls gets all the calls that were made to AuthToken.
// Check the length with:
//
//	len(mockedConfig.AuthTokenCalls())
func (mock *ConfigMock) AuthTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthToken.RLock()
	calls = mock.calls.AuthToken
	mock.lockAuthToken.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ConfigMock) Get(s string) (string, error) {
	if mock.GetFunc == nil {
		panic("ConfigMock.GetFunc: method is nil but Config.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedConfig.GetCalls())
func (mock *ConfigMock) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetNested calls GetNestedFunc.
func (mock *ConfigMock) GetNested(strings []string) (string, error) {
	if mock.GetNestedFunc == nil {
		panic("ConfigMock.GetNestedFunc: method is nil but Config.GetNested was just called")
	}
	callInfo := struct {
		Strings []string
	}{
		Strings: strings,
	}
	mock.lockGetNested.Lock()
	mock.calls.GetNested = append(mock.calls.GetNested, callInfo)
	mock.lockGetNested.Unlock()
	return mock.GetNestedFunc(strings)
}

// GetNestedCalls gets all the calls that were made to GetNested.
// Check the length with:
//
//	len(mockedConfig.GetNestedCalls())
func (mock *ConfigMock) GetNestedCalls() []struct {
	Strings []string
} {
	var calls []struct {
		Strings []string
	}
	mock.lockGetNested.RLock()
	calls = mock.calls.GetNested
	mock.lockGetNested.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *ConfigMock) Set(s1 string, s2 string) {
	if mock.SetFunc == nil {
		panic("ConfigMock.SetFunc: method is nil but Config.Set was just called")
	}
	callInfo := struct {
		S1 string
		S2 string
	}{
		S1: s1,
		S2: s2,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(s1, s2)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedConfig.SetCalls())
func (mock *ConfigMock) SetCalls() []struct {
	S1 string
	S2 string
} {
	var calls []struct {
		S1 string
		S2 string
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// SetNested calls SetNestedFunc.
func (mock *ConfigMock) SetNested(strings []string, s string) {
	if mock.SetNestedFunc == nil {
		panic("ConfigMock.SetNestedFunc: method is nil but Config.SetNested was just called")
	}
	callInfo := struct {
		Strings []string
		S       string
	}{
		Strings: strings,
		S:       s,
	}
	mock.lockSetNested.Lock()
	mock.calls.SetNested = append(mock.calls.SetNested, callInfo)
	mock.lockSetNested.Unlock()
	mock.SetNestedFunc(strings, s)
}

// SetNestedCalls gets all the calls that were made to SetNested.
// Check the length with:
//
//	len(mockedConfig.SetNestedCalls())
func (mock *ConfigMock) SetNestedCalls() []struct {
	Strings []string
	S       string
} {
	var calls []struct {
		Strings []string
		S       string
	}
	mock.lockSetNested.RLock()
	calls = mock.calls.SetNested
	mock.lockSetNested.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *ConfigMock) Write() error {
	if mock.WriteFunc == nil {
		panic("ConfigMock.WriteFunc: method is nil but Config.Write was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc()
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedConfig.WriteCalls())
func (mock *ConfigMock) WriteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
